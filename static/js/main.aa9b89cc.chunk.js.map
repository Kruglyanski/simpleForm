{"version":3,"sources":["Form/Form.module.css","Dropdown/Dropdown.module.css","Dropdown/Dropdown.tsx","validations/validation.tsx","Input/Input.tsx","Form/Form.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Dropdown","props","useState","isOpen","setIsOpen","className","cls","dropdownWrap","dropdown","open","onClick","prevState","setTouchedHandler","dropdown_label","dropdown_label_text","items","find","i","isActive","data","arrow","dropdown_menu","map","e","itemHandler","id","validateControl","value","validation","isValid","required","trim","email","test","String","toLowerCase","phone","name","Input","onChange","changeHandler","control","placeholder","touched","valid","errorMessage","Form","setItems","isChanged","setIsChanged","nameValue","setNameValue","emailValue","setEmailValue","phoneValue","setPhoneValue","isConditionsChecked","setIsConditionsChecked","setState","target","buttonDisabled","formWrap","formHeader","href","controls","lang","conditions","type","customCheckbox","htmlFor","submit","disabled","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aa9b89cc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formWrap\":\"Form_formWrap__3PqpY\",\"formHeader\":\"Form_formHeader__1IUHb\",\"name\":\"Form_name__3Ro1r\",\"email\":\"Form_email__zGocY\",\"phone\":\"Form_phone__1vo5U\",\"lang\":\"Form_lang__3phE8\",\"controls\":\"Form_controls__2sCsq\",\"conditions\":\"Form_conditions__3umzD\",\"customCheckbox\":\"Form_customCheckbox__1-cGl\",\"submit\":\"Form_submit__HCbqo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dropdown\":\"Dropdown_dropdown__xi4PW\",\"open\":\"Dropdown_open__2AUIr\",\"dropdown_menu\":\"Dropdown_dropdown_menu__1_TZs\",\"dropdown_label\":\"Dropdown_dropdown_label__p0y-z\",\"dropdown_label_text\":\"Dropdown_dropdown_label_text__xYW6x\",\"active\":\"Dropdown_active__1iCjz\",\"arrow\":\"Dropdown_arrow__35pox\"};","import React, {useState} from 'react'\r\nimport cls from '../Dropdown/Dropdown.module.css'\r\nimport {ItemsArrayType} from '../Form/Form'\r\n\r\ntype PropsType = {\r\n    itemHandler: (id: number) => void\r\n    items: ItemsArrayType\r\n    setTouchedHandler: () => void\r\n}\r\nexport const Dropdown = (props: PropsType) => {\r\n\r\n\r\n\r\n    const [isOpen, setIsOpen] = useState(false)\r\n\r\n\r\n    const toggle = () => {\r\n        setIsOpen(prevState => !prevState)\r\n        props.setTouchedHandler()\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className={cls.dropdownWrap}>\r\n            <div className={cls.dropdown + ' ' + (isOpen && cls.open)} onClick={toggle}>\r\n                <div className={cls.dropdown_label}>\r\n                    <div className={cls.dropdown_label_text}>\r\n                        {\r\n                            props.items.find(i => i.isActive)\r\n                                ?\r\n                                props.items.find(i => i.isActive)?.data\r\n                                :\r\n                                'Язык'\r\n                        }\r\n\r\n                    </div>\r\n                    <div className={cls.arrow}>\r\n                        <i className=\"fa fa-chevron-down\">\r\n                        </i>\r\n                    </div>\r\n\r\n                </div>\r\n                <ul className={cls.dropdown_menu}>\r\n                    {props.items.map(i => {\r\n                        return <li\r\n                            key={i.id}\r\n                            onClick={(e) => props.itemHandler(i.id)}\r\n                        >\r\n                            {i.data}\r\n                        </li>\r\n                    })}\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import {ValidationType} from '../Form/Form'\r\n\r\nexport function validateEmail(email: string) {\r\n    const re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n    return re.test(String(email).toLowerCase())\r\n}\r\n\r\nexport function validatePhone(phone: string) {\r\n    const re = /^((\\d|\\+\\d)[\\- ]?)?(\\(?\\d{3}\\)?[\\- ]?)?[\\d\\- ]{7,10}$/\r\n\r\n    return re.test(String(phone))\r\n\r\n}\r\n\r\nexport function validateName(name: string) {\r\n    const re = /^[A-Za-zА-Яа-я -]+$/\r\n    return re.test(String(name).toLowerCase())\r\n\r\n}\r\n\r\nexport const validateControl = (value: string, validation: ValidationType) => {\r\n    if (!validation) {\r\n        return true\r\n    }\r\n    let isValid = true\r\n\r\n    if (validation.required) {\r\n        isValid = value.trim() !== '' && isValid\r\n    }\r\n\r\n    if (validation.email) {\r\n        isValid = validateEmail(value) && isValid\r\n    }\r\n\r\n    if (validation.phone) {\r\n        isValid = validatePhone(value) && isValid\r\n    }\r\n\r\n    if (validation.name) {\r\n        isValid = validateName(value) && isValid\r\n    }\r\n\r\n    return isValid\r\n}","import React from 'react'\r\nimport cls from '../Form/Form.module.css'\r\nimport {ControlType} from '../Form/Form'\r\n\r\ntype PropsType = {\r\n    changeHandler: (e: React.ChangeEvent<HTMLInputElement>, name: string ) => void\r\n    control: ControlType\r\n}\r\nexport const Input = (props: PropsType) => {\r\n    return (\r\n        <div className={cls.name}>\r\n            <label>Имя</label>\r\n            <input onChange={(e) => props.changeHandler(e, props.control.name)} value={props.control.value}\r\n                   placeholder={props.control.placeholder}/>\r\n            <span>{props.control.touched && !props.control.valid && props.control.errorMessage}</span>\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react'\r\nimport cls from './Form.module.css'\r\nimport {Dropdown} from '../Dropdown/Dropdown'\r\nimport {validateControl} from '../validations/validation'\r\nimport {Input} from '../Input/Input'\r\n\r\nexport type ValidationType = {\r\n    required: boolean,\r\n    name?: boolean\r\n    email?: boolean\r\n    phone?: boolean\r\n}\r\n\r\nexport type ItemsArrayType = Array<ItemType>\r\n\r\nexport type ItemType = {\r\n    id: number\r\n    data: string\r\n    isActive: boolean\r\n}\r\nexport type ControlType = {\r\n    name: string\r\n    placeholder: string\r\n    value: string\r\n    valid: boolean\r\n    touched: boolean\r\n    validation: ValidationType\r\n    errorMessage: string\r\n}\r\n\r\n\r\nexport const Form = () => {\r\n\r\n    const [items, setItems] = useState(\r\n        [\r\n            {id: 0, data: 'Русский', isActive: false},\r\n            {id: 1, data: 'Английский', isActive: false},\r\n            {id: 2, data: 'Китайский', isActive: false},\r\n            {id: 3, data: 'Испанский', isActive: false}\r\n        ]\r\n    )\r\n\r\n    const [isChanged, setIsChanged] = useState({\r\n        valid: false,\r\n        touched: false,\r\n        errorMessage: 'Выберите язык'\r\n    })\r\n\r\n    const [nameValue, setNameValue] = useState({\r\n        name: 'name',\r\n        placeholder: 'Введите ваше имя',\r\n        value: '',\r\n        valid: false,\r\n        touched: false,\r\n        validation: {\r\n            required: true,\r\n            name: true\r\n        },\r\n        errorMessage: 'Введите корректное имя'\r\n    })\r\n\r\n    const [emailValue, setEmailValue] = useState({\r\n        name: 'email',\r\n        placeholder: 'Введите ваш email',\r\n        value: '',\r\n        valid: false,\r\n        touched: false,\r\n        validation: {\r\n            required: true,\r\n            email: true\r\n        },\r\n        errorMessage: 'Введите корректный email'\r\n    })\r\n\r\n    const [phoneValue, setPhoneValue] = useState({\r\n            name: 'phone',\r\n            placeholder: 'Введите номер телефона',\r\n            value: '',\r\n            valid: false,\r\n            touched: false,\r\n            validation: {\r\n                required: true,\r\n                phone: true\r\n            },\r\n            errorMessage: 'Введите корректный номер телефона'\r\n        }\r\n    )\r\n\r\n    const [isConditionsChecked, setIsConditionsChecked] = useState({\r\n        valid: false,\r\n        touched: false,\r\n        errorMessage: 'Необходимо согласие с условиями'\r\n    })\r\n\r\n    const changeHandler = (e: React.ChangeEvent<HTMLInputElement>, name: string) => {\r\n        const setState = (prevState: any) => {\r\n            return {\r\n                ...prevState,\r\n                value: e.target.value,\r\n                touched: true,\r\n                valid: validateControl(e.target.value, prevState.validation)\r\n            }\r\n        }\r\n        if (name === 'name') setNameValue(prevState => setState(prevState))\r\n        if (name === 'email') setEmailValue(prevState => setState(prevState))\r\n        if (name === 'phone') setPhoneValue(prevState => setState(prevState))\r\n    }\r\n\r\n\r\n    const itemHandler = (id: number) => {\r\n\r\n        setItems(prevState => prevState.map(i => {\r\n                if (i.id === id) {\r\n                    return {...i, isActive: true}\r\n                }\r\n                return {...i, isActive: false}\r\n            })\r\n        )\r\n        setIsChanged(prevState => {\r\n            return {\r\n                ...prevState,\r\n                valid: true\r\n            }\r\n        })\r\n    }\r\n    const setTouchedHandler = () => {\r\n        setIsChanged(prevState => {\r\n            return {\r\n                ...prevState,\r\n                touched: true\r\n            }\r\n        })\r\n    }\r\n    const checkHandler = () => {\r\n        setIsConditionsChecked(prevState => {\r\n            return {\r\n                ...prevState,\r\n                touched: true,\r\n                valid: !prevState.valid\r\n            }\r\n        })\r\n    }\r\n    const buttonDisabled =\r\n        !phoneValue.valid\r\n        || !nameValue.valid\r\n        || !emailValue.valid\r\n        || !isConditionsChecked.valid\r\n        || !isChanged.valid\r\n\r\n    return (\r\n        <div className={cls.formWrap}>\r\n            <form>\r\n                <div className={cls.formHeader}>\r\n                    <h2>Регистрация</h2>\r\n                    <p>Уже есть аккаунт?<a href=\"/\">Войти</a></p>\r\n                </div>\r\n                <div className={cls.controls}>\r\n                    <Input changeHandler={changeHandler} control={nameValue}/>\r\n                    <Input changeHandler={changeHandler} control={emailValue}/>\r\n                    <Input changeHandler={changeHandler} control={phoneValue}/>\r\n                    <div className={cls.lang}>\r\n                        <label>Язык</label>\r\n                        <Dropdown items={items} itemHandler={itemHandler} setTouchedHandler={setTouchedHandler}/>\r\n                        <span>{!isChanged.valid && isChanged.touched && isChanged.errorMessage}</span>\r\n                    </div>\r\n                    <div className={cls.conditions}>\r\n                        <input type=\"checkbox\" className={cls.customCheckbox} id=\"check\" name=\"check\" value=\"yes\"\r\n                               onChange={checkHandler}/>\r\n                        <label htmlFor=\"check\"/>\r\n                        <p>Принимаю <a href=\"/\">условия</a> использования</p>\r\n                        <span>{!isConditionsChecked.valid && isConditionsChecked.touched && isConditionsChecked.errorMessage}</span>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className={cls.submit}>\r\n                    <button\r\n                        disabled={buttonDisabled}>Зарегистрироваться\r\n                    </button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n\r\n    )\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport {Form} from './Form/Form'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Form/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
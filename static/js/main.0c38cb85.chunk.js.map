{"version":3,"sources":["Form/Form.module.css","Dropdown/Dropdown.module.css","Dropdown/Dropdown.tsx","validations/validation.tsx","Input/Input.tsx","Form/Form.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Dropdown","props","useState","isOpen","setIsOpen","className","cls","dropdownWrap","console","log","dropdown","open","onClick","prevState","setTouchedHandler","dropdown_label","dropdown_label_text","items","find","i","isActive","data","arrow","dropdown_menu","map","e","itemHandler","id","validateControl","value","validation","isValid","required","trim","email","test","String","toLowerCase","phone","name","Input","control","changeHandler","input","label","onChange","placeholder","touched","valid","errorMessage","Form","setDropdown","setName","setEmail","setPhone","check","setCheck","setState","target","buttonDisabled","formWrap","formHeader","href","controls","lang","conditions","type","customCheckbox","htmlFor","submit","disabled","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0c38cb85.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formWrap\":\"Form_formWrap__3PqpY\",\"formHeader\":\"Form_formHeader__1IUHb\",\"input\":\"Form_input__2MrpH\",\"lang\":\"Form_lang__3phE8\",\"controls\":\"Form_controls__2sCsq\",\"conditions\":\"Form_conditions__3umzD\",\"customCheckbox\":\"Form_customCheckbox__1-cGl\",\"submit\":\"Form_submit__HCbqo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dropdown\":\"Dropdown_dropdown__xi4PW\",\"open\":\"Dropdown_open__2AUIr\",\"dropdown_menu\":\"Dropdown_dropdown_menu__1_TZs\",\"dropdown_label\":\"Dropdown_dropdown_label__p0y-z\",\"dropdown_label_text\":\"Dropdown_dropdown_label_text__xYW6x\",\"active\":\"Dropdown_active__1iCjz\",\"arrow\":\"Dropdown_arrow__35pox\"};","import React, {useState} from 'react'\r\nimport cls from '../Dropdown/Dropdown.module.css'\r\nimport {ItemsArrayType} from '../Form/Form'\r\n\r\ntype PropsType = {\r\n    itemHandler: (id: number) => void\r\n    items: ItemsArrayType\r\n    setTouchedHandler: () => void\r\n}\r\nexport const Dropdown = (props: PropsType) => {\r\n\r\n\r\n\r\n    const [isOpen, setIsOpen] = useState(false)\r\n\r\n\r\n    const toggle = () => {\r\n        setIsOpen(prevState => !prevState)\r\n        props.setTouchedHandler()\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className={cls.dropdownWrap}>\r\n            {console.log('props', props)}\r\n            <div className={cls.dropdown + ' ' + (isOpen && cls.open)} onClick={toggle}>\r\n                <div className={cls.dropdown_label}>\r\n                    <div className={cls.dropdown_label_text}>\r\n                        {\r\n                            props.items.find(i => i.isActive)\r\n                                ?\r\n                                props.items.find(i => i.isActive)?.data\r\n                                :\r\n                                'Язык'\r\n                        }\r\n\r\n                    </div>\r\n                    <div className={cls.arrow}>\r\n                        <i className=\"fa fa-chevron-down\">\r\n                        </i>\r\n                    </div>\r\n\r\n                </div>\r\n                <ul className={cls.dropdown_menu}>\r\n                    {props.items.map(i => {\r\n                        return <li\r\n                            key={i.id}\r\n                            onClick={(e) => props.itemHandler(i.id)}\r\n                        >\r\n                            {i.data}\r\n                        </li>\r\n                    })}\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import {ValidationType} from '../Form/Form'\r\n\r\nexport function validateEmail(email: string) {\r\n    const re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n    return re.test(String(email).toLowerCase())\r\n}\r\n\r\nexport function validatePhone(phone: string) {\r\n    const re = /^((\\d|\\+\\d)[\\- ]?)?(\\(?\\d{3}\\)?[\\- ]?)?[\\d\\- ]{7,10}$/\r\n\r\n    return re.test(String(phone))\r\n\r\n}\r\n\r\nexport function validateName(name: string) {\r\n    const re = /^[A-Za-zА-Яа-я -]+$/\r\n    return re.test(String(name).toLowerCase())\r\n\r\n}\r\n\r\nexport const validateControl = (value: string, validation: ValidationType) => {\r\n    if (!validation) {\r\n        return true\r\n    }\r\n    let isValid = true\r\n\r\n    if (validation.required) {\r\n        isValid = value.trim() !== '' && isValid\r\n    }\r\n\r\n    if (validation.email) {\r\n        isValid = validateEmail(value) && isValid\r\n    }\r\n\r\n    if (validation.phone) {\r\n        isValid = validatePhone(value) && isValid\r\n    }\r\n\r\n    if (validation.name) {\r\n        isValid = validateName(value) && isValid\r\n    }\r\n\r\n    return isValid\r\n}","import React from 'react'\r\nimport cls from '../Form/Form.module.css'\r\nimport {ControlType} from '../Form/Form'\r\n\r\ntype PropsType = {\r\n    changeHandler: (e: React.ChangeEvent<HTMLInputElement>, name: string ) => void\r\n    control: ControlType\r\n}\r\nexport const Input = ({control, changeHandler}: PropsType) => {\r\n    return (\r\n        <div className={cls.input}>\r\n            <label>{control.label}</label>\r\n            <input onChange={(e) => changeHandler(e, control.name)} value={control.value}\r\n                   placeholder={control.placeholder}/>\r\n            <span>{control.touched && !control.valid && control.errorMessage}</span>\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react'\r\nimport cls from './Form.module.css'\r\nimport {Dropdown} from '../Dropdown/Dropdown'\r\nimport {validateControl} from '../validations/validation'\r\nimport {Input} from '../Input/Input'\r\n\r\nexport type ValidationType = {\r\n    required: boolean,\r\n    name?: boolean\r\n    email?: boolean\r\n    phone?: boolean\r\n}\r\n\r\nexport type ItemsArrayType = Array<ItemType>\r\n\r\nexport type ItemType = {\r\n    id: number\r\n    data: string\r\n    isActive: boolean\r\n}\r\nexport type ControlType = {\r\n    name: string\r\n    placeholder: string\r\n    value: string\r\n    label: string\r\n    valid: boolean\r\n    touched: boolean\r\n    validation: ValidationType\r\n    errorMessage: string\r\n}\r\n\r\n\r\nexport const Form = () => {\r\n\r\n    const [dropdown, setDropdown] = useState({\r\n        items: [\r\n            {id: 0, data: 'Русский', isActive: false},\r\n            {id: 1, data: 'Английский', isActive: false},\r\n            {id: 2, data: 'Китайский', isActive: false},\r\n            {id: 3, data: 'Испанский', isActive: false}\r\n        ],\r\n        label: 'Язык',\r\n        valid: false,\r\n        touched: false,\r\n        errorMessage: 'Выберите язык'\r\n    })\r\n\r\n    const [name, setName] = useState({\r\n        name: 'name',\r\n        placeholder: 'Введите ваше имя',\r\n        value: '',\r\n        label: 'Имя',\r\n        valid: false,\r\n        touched: false,\r\n        validation: {\r\n            required: true,\r\n            name: true\r\n        },\r\n        errorMessage: 'Введите корректное имя'\r\n    })\r\n\r\n    const [email, setEmail] = useState({\r\n        name: 'email',\r\n        placeholder: 'Введите ваш email',\r\n        value: '',\r\n        label: 'Email',\r\n        valid: false,\r\n        touched: false,\r\n        validation: {\r\n            required: true,\r\n            email: true\r\n        },\r\n        errorMessage: 'Введите корректный email'\r\n    })\r\n\r\n    const [phone, setPhone] = useState({\r\n            name: 'phone',\r\n            placeholder: 'Введите номер телефона',\r\n            value: '',\r\n            label: 'Номер телефона',\r\n            valid: false,\r\n            touched: false,\r\n            validation: {\r\n                required: true,\r\n                phone: true\r\n            },\r\n            errorMessage: 'Введите корректный номер телефона'\r\n        }\r\n    )\r\n\r\n    const [check, setCheck] = useState({\r\n        valid: false,\r\n        touched: false,\r\n        errorMessage: 'Необходимо согласие с условиями'\r\n    })\r\n\r\n    const changeHandler = (e: React.ChangeEvent<HTMLInputElement>, name: string) => {\r\n        const setState = (prevState: any) => {\r\n            return {\r\n                ...prevState,\r\n                value: e.target.value,\r\n                touched: true,\r\n                valid: validateControl(e.target.value, prevState.validation)\r\n            }\r\n        }\r\n        if (name === 'name') setName(prevState => setState(prevState))\r\n        if (name === 'email') setEmail(prevState => setState(prevState))\r\n        if (name === 'phone') setPhone(prevState => setState(prevState))\r\n    }\r\n\r\n\r\n    const itemHandler = (id: number) => {\r\n        setDropdown(prevState => {\r\n                return {\r\n                    ...prevState,\r\n                    items: prevState.items\r\n                        .map(i => {\r\n                            if (i.id === id) {\r\n                                return {...i, isActive: true}\r\n                            }\r\n                            return {...i, isActive: false}\r\n                        }),\r\n                    valid: true\r\n                }\r\n            }\r\n        )\r\n\r\n    }\r\n    const setTouchedHandler = () => {\r\n        setDropdown(prevState => {\r\n            return {\r\n                ...prevState,\r\n                touched: true\r\n            }\r\n        })\r\n    }\r\n    const checkHandler = () => {\r\n        setCheck(prevState => {\r\n            return {\r\n                ...prevState,\r\n                touched: true,\r\n                valid: !prevState.valid\r\n            }\r\n        })\r\n    }\r\n    const buttonDisabled =\r\n        !phone.valid\r\n        || !name.valid\r\n        || !email.valid\r\n        || !check.valid\r\n        || !dropdown.valid\r\n\r\n    return (\r\n        <div className={cls.formWrap}>\r\n            <form>\r\n                <div className={cls.formHeader}>\r\n                    <h2>Регистрация</h2>\r\n                    <p>Уже есть аккаунт?<a href=\"/\">Войти</a></p>\r\n                </div>\r\n                <div className={cls.controls}>\r\n\r\n                    <Input changeHandler={changeHandler} control={name}/>\r\n\r\n                    <Input changeHandler={changeHandler} control={email}/>\r\n\r\n                    <Input changeHandler={changeHandler} control={phone}/>\r\n\r\n                    <div className={cls.lang}>\r\n                        <label>{dropdown.label}</label>\r\n                        <Dropdown items={dropdown.items} itemHandler={itemHandler}\r\n                                  setTouchedHandler={setTouchedHandler}/>\r\n                        <span>{!dropdown.valid && dropdown.touched && dropdown.errorMessage}</span>\r\n                    </div>\r\n\r\n                    <div className={cls.conditions}>\r\n                        <input type=\"checkbox\" className={cls.customCheckbox} id=\"check\" name=\"check\" value=\"yes\"\r\n                               onChange={checkHandler}/>\r\n                        <label htmlFor=\"check\"/>\r\n                        <p>Принимаю <a href=\"/\">условия</a> использования</p>\r\n                        <span>{!check.valid && check.touched && check.errorMessage}</span>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className={cls.submit}>\r\n                    <button\r\n                        disabled={buttonDisabled}>Зарегистрироваться\r\n                    </button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n\r\n    )\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport {Form} from './Form/Form'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Form/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}